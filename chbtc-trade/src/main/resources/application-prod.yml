server:  
  port: 8082  

# 开发环境配置  
spring:
    profiles:
        active: dev
    devtools:
        restart:
            enabled: true
        livereload:
            enabled: false
    datasource:
        url: jdbc:mysql://localhost:3306/lccf?useUnicode=true&characterEncoding=utf8&useSSL=false
        name:
        username: root
        password: 111111
        hikari:
            data-source-properties:
                cachePrepStmts: true
                prepStmtCacheSize: 250
                prepStmtCacheSqlLimit: 2048
                useServerPrepStmts: true
    jpa:
        database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
        database: MYSQL
        show_sql: true
        properties:
            hibernate.cache.use_second_level_cache: true
            hibernate.hbm2ddl.auto: create-drop
            hibernate.show_sql: true #打印sql
#    spring.jpa.properties.hibernate.hbm2ddl.auto是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：
#    create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#    create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#    update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#    validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。

# ===================================================================
# lccf specific properties
# ===================================================================
lccf:
  swagger:
        title: 后台管理系统
        description: boot+ng2 搭建后台管理系统
        version: 0.0.1
        termsOfServiceUrl:
        contact:
        license:
        licenseUrl:

spring:
  cache:
     #缓存类型
     type: GUAVA
     #缓存名称
     cache-names: guavaCache
     #缓存最大数量500条, 缓存失效时间 6个小时
     guava.spec: maximumSize=500,expireAfterWrite=360m
  # REDIS (RedisProperties)
#  redis :
#    host : localhost # server host
#    port : 6379 # connection port
#    pool.max-idle : 8 # pool settings ...
#    pool.min-idle : 1
#    pool.max-active : 8
#    pool.max-wait : -1